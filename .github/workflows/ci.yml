name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Backend Python Testing
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
        timeout-minutes: 2

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest test_basic.py -v --tb=short
        timeout-minutes: 3

      # 3. Frontend Build Verification
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install frontend dependencies
        working-directory: web
        run: |
          # Clean install to avoid dependency issues
          rm -rf node_modules package-lock.json
          # Use npm install which is more reliable for this project
          npm install
        timeout-minutes: 3

      - name: Verify TypeScript compilation
        working-directory: web
        run: npm run build
        timeout-minutes: 3

      - name: Verify build artifacts
        working-directory: web
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build artifacts not found in dist/ directory"
            exit 1
          fi
          echo "‚úÖ Build artifacts created successfully"
          ls -la dist/
        timeout-minutes: 1

      # 4. Docker Configuration Validation
      - name: Validate Docker Compose configuration
        run: |
          echo "üîç Validating Docker Compose configuration..."
          if ! docker compose config -q; then
            echo "‚ùå Docker Compose configuration validation failed"
            docker compose config
            exit 1
          fi
          echo "‚úÖ Docker Compose configuration is valid"
          
          # Check that all services are properly defined
          services=$(docker compose config --services)
          expected_services=("backend" "ros2" "web")
          
          for service in "${expected_services[@]}"; do
            if echo "$services" | grep -q "^$service$"; then
              echo "‚úÖ Service '$service' found"
            else
              echo "‚ùå Service '$service' not found in docker-compose.yml"
              exit 1
            fi
          done
        timeout-minutes: 2

      # 5. Final Status
      - name: CI Pipeline Status
        if: success()
        run: |
          echo "üéâ All CI checks passed successfully!"
          echo "‚úÖ Backend tests completed"
          echo "‚úÖ Frontend build successful"
          echo "‚úÖ Docker configuration valid"
          echo "‚úÖ TypeScript compilation passed"
          echo ""
          echo "üöÄ Ready for deployment or merge!"
